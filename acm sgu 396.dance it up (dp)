#include<iomanip>
#include<iostream>
#include <vector>
#include <algorithm>
#include <fstream>
#include<map>
#include<cmath>
#include<stdio.h>
#include<queue>
#include <set>
#include <stack>

using std::string;
using namespace std;
#define vi vector<int>
#define ii pair<int,int>
#define MIN  (-214748364);
#define ull unsigned long long int
#define ll  long long int
const int MAX = 100000000;
const int N = 14;
const int U = 0, R = 1, D = 2, L = 3;
int dp[N][4][4][2][2], n;
int steps[N];

int main() {
    freopen("cube.txt", "r", stdin);
    scanf("%d", &n);
    char c;
    for (int i = 0; i < n; ++i) {
        scanf("%c", &c);
        switch (c) {
            case 'U':
                steps[i] = 0;
                break;
            case 'R':
                steps[i] = 1;
                break;
            case 'D':
                steps[i] = 2;
                break;
            case 'L':
                steps[i] = 3;
                break;

        }
    }
    fill(dp, dp + N * 4 * 4 * 2 * 2, MAX);
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            if (i != j && (i != R && j != L)) {
                dp[n][i][j][0][0] = dp[n][i][j][1][1] = 0;
                dp[n][i][j][0][1] = dp[n][i][j][1][0] = 0;
            }
        }
    }

    for (int beat = n - 1; beat >= 0; --beat) {
        for (int llon = 0; llon < 4; ++llon) {
            for (int rlon = 0; rlon < 4; ++rlon) {
                for (int pl = 0; pl <= 1; pl++) {
                    for (int pr = 0; pr <= 1; pr++) {
                        int m = MAX;
                        for (int i = 0; i < 4; i++) {
                            for (int j = 0; j < 4; ++j) {
                                if (i == llon && rlon == j) {//legs at same pos
                                    //press left

                                        m = min(m, dp[beat - (steps[beat]==llon?1:0)][i][j][1][0] + 1);

                                  //press right
                                        m = min(m, dp[beat - (steps[beat]==rlon?1:0)][i][j][0][1] + 1);


                                }
                                 if (j == rlon &&  pl==0) { //left leg moves and presses right remains
                                    m = min(m, dp[beat - (steps[beat]==i?1:0)][i][j][1][0] + 3);
                                }
                                if (i == llon    && pr==0) { //rt leg moves and presses left remains
                                    m = min(m, dp[beat - (steps[beat]==j?1:0)][i][j][0][1] +3);
                                }
                                if (j == rlon   && pl==1) { //left leg moves and presses right remains
                                    m = min(m, dp[beat - (steps[beat]==i?1:0)][i][j][1][0] + 9);
                                }
                                if (i == llon   && pr==1) { //rt leg moves and presses left remains
                                    m = min(m, dp[beat - (steps[beat]==j?1:0)][i][j][0][1] +9);
                                }
                                if(i!=llon && j!=rlon){
                                    int minus = 0;
                                    if(steps[beat]==i && steps[beat-1]==j)
                                        minus=2;
                                    else if(steps[beat]==j && steps[beat-1]==i)
                                        minus=2;
                                    else if(steps[beat]!=j && steps[beat-1]==i)
                                        minus=1;
                                    else if(steps[beat]==j && steps[beat-1]!=i)
                                        minus=1;
                                    else if(steps[beat]!=i && steps[beat-1]==j)
                                        minus=1;
                                    else if(steps[beat]==i && steps[beat-1]!=j)
                                        minus=1;

                                    m = min(m, dp[beat - minus][i][j][1][1] +10);
                                }

                            }


                        }
                        dp[beat][llon][rlon][pl][pr]=m;
                    }
                }
            }
        }

    }
    printf("%d",dp[0][L][R][0][0]);

    return 0;


}
